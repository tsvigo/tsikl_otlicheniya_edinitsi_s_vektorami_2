#include "dialog.h"
#include "ui_dialog.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Dialog::Dialog
/// \param parent
#include <vector>
#include <fstream>
#include <iostream>
using namespace std;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::vector<unsigned long long> list_sinapsov;//(10105);// = {};
std::vector<unsigned long long> list_neyronov;
long long Peremennaya_Oshibka ;
int var ;
int index_neyrona, index_sinapsa; 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void	Funktciia_resheniya()
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////// (3) Функция решения   /// funktsiya_resheniya // NOTE: функция решения
    //
    //////////////////////////////////////////////////////////////////////
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    for (int var = 101; var < 201; ++var) // это диапазон нейронов // NOTE: функция решения
    {
        //        // это для одного 101 нейрона:
        for (int index_neyrona = 1, index_sinapsa = 1;
             index_neyrona < 201, index_sinapsa < 10101;
             ++index_neyrona, index_sinapsa = index_sinapsa + 100)
        // выход за индекс?
        {
            //            // тут можно костыль поставить проверка что
            //            Synaps::Peremennaia_Soprotivlenie_Sinapsa[index_sinapsa] не
            //            0
            if (list_sinapsov[index_sinapsa] == 0) { // для избежания деления на 0
                list_sinapsov[index_sinapsa] = 1;
            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
            
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
            
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
            
        }
        
    }
    // нейроны второго ряда посчитаны
    // тут надо досчитать последний 201 нейрон.
    for (int index_neyrona = 101, index_sinapsa = 10001; index_neyrona < 201;
         ++index_neyrona, ++index_sinapsa)
    {
        if (list_sinapsov[index_sinapsa] == 0) { // для избежания деления на 0
            list_sinapsov[index_sinapsa] = 1;
        }
        
        list_neyronov[201] = list_neyronov[201] + (list_neyronov[index_neyrona] /
                                                   list_sinapsov[index_sinapsa]);//  list_sinapsov[index_sinapsa]==0
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // long long oshibka
    Peremennaya_Oshibka
        =   1073741824-list_neyronov[201] ; /// получается если oshibka
    
    
}
/// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Dialog::Dialog(QWidget *parent)
    : QDialog(parent)
    , ui(new Ui::Dialog)
{
    ui->setupUi(this);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// 
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////// (1) //// Считывание из файла нейронов в
    ///массив:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    try {
        
        
      //  int
        unsigned long long    n;    
        // std::vector<int>list_neyronov;
        ifstream file("/home/viktor/my_projects_qt_2/Funkciya_podachi_signalov_na_vhod/neyroni_i_signal.txt");
        if (!file) {
            std::cerr << "ERROR: Cannot open "
                         "'/home/viktor/my_projects_qt_2/"
                         "Funkciya_podachi_signalov_na_vhod/neyroni_i_signal.txt'!"
                      << std::endl;
            //  exit(1);
        }
        while (!file.eof()) 
        {        file >> n;        list_neyronov.push_back(n);       // cout << n << endl;
        } 
        file.close();
        //  std::cout << list_neyronov[1] << std::endl;
        
    } catch (const std::exception &ex) {
        std::cerr << "Exception: '" << ex.what() << "'!" << std::endl;
        //  exit(1);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    
    //////////////////////////////// (1) ///// Конец считывания из файла нейронов  ///в массив. ////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////// (2) //// Считывание из файла синапсов в  ///массив:
    ///////////////////////////////////////////////////////////////////////
    try {
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       // int
         unsigned long long   n;    
        
        ifstream file2(
            
            "/home/viktor/my_projects_qt_2/build-zapolnenie_sinapsov_sluchajnymi_nachalnymi_soprotivleniyami_2-Desktop_Qt_5_12_12_GCC_64bit-Debug/sinapsi-new.txt"
            
            //              "/home/viktor/my_projects_qt_2/zapolnenie_0/0_sinapsi.txt"
            
            );
        
        
        
        
        if (!file2) {
            std::cerr << "ERROR: Cannot open "
                         "'/home/viktor/my_projects_qt_2/"
                         "build-zapolnenie_sinapsov_sluchajnymi_nachalnymi_soprotivleniyami_2-"
                         "Desktop_Qt_5_12_12_GCC_64bit-Debug/sinapsi.txt'!"
                      << std::endl;
            //  exit(1);
        }
        while (!file2.eof()) 
        {        file2 >> n;        list_sinapsov.push_back(n);       // cout << n << endl;
        } 
        file2.close();
        //   std::cout << list_sinapsov[1] << std::endl;
        //  n2 = list_sinapsov.size();
    }
    
    catch (const std::exception &ex) {
        std::cerr << "Exception: '" << ex.what() << "'!" << std::endl;
        //  exit(1);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//try {
    
    Funktciia_resheniya();
//}
//catch (const std::exception &ex) {
//    std::cerr << "Exception: '" << ex.what() << "'!" << std::endl;
    //  exit(1);
//}
    cout << "Ошибка = "<< Peremennaya_Oshibka << endl;
    
    
    
    
    
    
    
    
   
}

Dialog::~Dialog()
{
    delete ui;
}

